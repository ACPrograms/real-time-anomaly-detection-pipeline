# Render Blueprint Specification v1

# Define the managed database first.
databases:
  - name: project-db # This will be our PostgreSQL database
    plan: free

# Define the services that make up the application.
services:
  # --- Kafka Stack ---
  - name: zookeeper
    type: pserv # Private Service
    runtime: docker # IMPORTANT: Specify the runtime
    image:
      url: confluentinc/cp-zookeeper:7.5.0
    envVars:
      - key: ZOOKEEPER_CLIENT_PORT
        value: 2181
      - key: ZOOKEEPER_TICK_TIME
        value: 2000

  - name: kafka
    type: pserv
    runtime: docker
    image:
      url: confluentinc/cp-kafka:7.5.0
    envVars:
      - key: KAFKA_BROKER_ID
        value: 1
      - key: KAFKA_ZOOKEEPER_CONNECT
        value: zookeeper:2181 # Internal service discovery
      - key: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
        value: PLAINTEXT:PLAINTEXT
      - key: KAFKA_ADVERTISED_LISTENERS
        value: PLAINTEXT://kafka:9092
      - key: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
        value: 1
      - key: KAFKA_AUTO_CREATE_TOPICS_ENABLE
        value: "true"

  # --- Our Python Application ---
  - name: data-processor
    type: pserv
    runtime: docker
    dockerfilePath: ./Dockerfile
    startCommand: "python3 -m pipeline.kafka_consumer"
    envVars:
      - fromGroup: project-secrets # Pulls secrets (API keys, etc.)
      - key: KAFKA_BOOTSTRAP_SERVERS
        value: kafka:9092
      # NOTE: DATABASE_URL is automatically injected by Render from the managed 'project-db' service.

  # --- Monitoring Stack ---
  - name: prometheus
    type: pserv
    runtime: docker
    image:
      url: prom/prometheus:latest
    startCommand: "--config.file=/etc/prometheus/config/prometheus.yml --storage.tsdb.path=/prometheus"
    disk:
      name: prometheus-data
      mountPath: /prometheus
      sizeGB: 1

  - name: grafana
    type: web # Publicly accessible Web Service
    runtime: docker
    image:
      url: grafana/grafana:latest