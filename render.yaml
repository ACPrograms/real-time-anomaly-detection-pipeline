# Render Blueprint Specification v1
# This is the final version, validated against official documentation examples.

# Define environment variable groups first for clarity.
envVarGroups:
  - name: project-secrets
    envVars:
      - key: SLACK_WEBHOOK_URL
        sync: false # Do not sync the value back to the yaml
      - key: OPENWEATHER_API_KEY
        sync: false

# Define the managed database instance.
# The DATABASE_URL from this will be automatically injected into all services.
databases:
  - name: project-db
    plan: free

# Define the application services.
services:
  # --- Kafka Stack ---
  - name: zookeeper
    type: pserv # Private Service
    runtime: docker # Specify the runtime
    image:
      url: confluentinc/cp-zookeeper:7.5.0
    envVars:
      - key: ZOOKEEPER_CLIENT_PORT
        value: 2181
      - key: ZOOKEEPER_TICK_TIME
        value: 2000

  - name: kafka
    type: pserv
    runtime: docker
    image:
      url: confluentinc/cp-kafka:7.5.0
    envVars:
      - key: KAFKA_BROKER_ID
        value: 1
      - key: KAFKA_ZOOKEEPER_CONNECT
        value: zookeeper:2181
      - key: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
        value: PLAINTEXT:PLAINTEXT
      - key: KAFKA_ADVERTISED_LISTENERS
        value: PLAINTEXT://kafka:9092
      - key: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
        value: 1
      - key: KAFKA_AUTO_CREATE_TOPICS_ENABLE
        value: "true"

  # --- Our Python Application ---
  - name: data-processor
    type: pserv
    runtime: docker
    # Define the build context and Dockerfile path
    dockerContext: .
    dockerfilePath: Dockerfile
    # The CMD from the Dockerfile will be used automatically.
    envVars:
      - fromGroup: project-secrets
      - key: KAFKA_BOOTSTRAP_SERVERS
        value: kafka:9092
      # DATABASE_URL is automatically injected by Render.

  # --- Monitoring Stack ---
  - name: prometheus
    type: pserv
    runtime: docker
    image:
      url: prom/prometheus:latest
    # FIX: Use 'dockerCommand' to provide the arguments to the container's entrypoint.
    dockerCommand: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    disk:
      name: prometheus-data
      mountPath: /prometheus
      sizeGB: 1

  - name: grafana
    type: web # Publicly accessible
    runtime: docker
    image:
      url: grafana/grafana:latest
    # Add a health check to ensure Render knows when it's ready.
    healthCheckPath: /api/health